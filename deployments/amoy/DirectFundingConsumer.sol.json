{
  "address": "0xC65F232C9c41dDF5139751746D2C0216c3CE34A6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAdminChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPendingAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyVRFWrapperCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "addRandomRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLinkToken",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfV2PlusWrapper",
      "outputs": [
        {
          "internalType": "contract IVRFV2PlusWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "role",
          "type": "address"
        }
      ],
      "name": "removeRandomRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enableNativePayment",
          "type": "bool"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "paid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1bddb2fb23ab06b8659822b66ba4272adb23bc4b667ae016f0b4dc6806bc6eaa",
  "receipt": {
    "to": null,
    "from": "0x72603a004dEAA71Aa0a4cdeaEaad33137e71a7a0",
    "contractAddress": "0xC65F232C9c41dDF5139751746D2C0216c3CE34A6",
    "transactionIndex": 23,
    "gasUsed": "1998183",
    "logsBloom": "0x
    "blockHash": "0x98d172ddb80314289f21aa731b0bf9da5de6b572ce58a906a276405c844afa07",
    "transactionHash": "0x1bddb2fb23ab06b8659822b66ba4272adb23bc4b667ae016f0b4dc6806bc6eaa",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 13470123,
        "transactionHash": "0x1bddb2fb23ab06b8659822b66ba4272adb23bc4b667ae016f0b4dc6806bc6eaa",
        "address": "0xC65F232C9c41dDF5139751746D2C0216c3CE34A6",
        "topics": [
          "0xf8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec6",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072603a004deaa71aa0a4cdeaeaad33137e71a7a0"
        ],
        "data": "0x",
        "logIndex": 46,
        "blockHash": "0x98d172ddb80314289f21aa731b0bf9da5de6b572ce58a906a276405c844afa07"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 13470123,
        "transactionHash": "0x1bddb2fb23ab06b8659822b66ba4272adb23bc4b667ae016f0b4dc6806bc6eaa",
        "address": "0xC65F232C9c41dDF5139751746D2C0216c3CE34A6",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072603a004deaa71aa0a4cdeaeaad33137e71a7a0",
          "0x00000000000000000000000072603a004deaa71aa0a4cdeaeaad33137e71a7a0"
        ],
        "data": "0x",
        "logIndex": 47,
        "blockHash": "0x98d172ddb80314289f21aa731b0bf9da5de6b572ce58a906a276405c844afa07"
      },
      {
        "transactionIndex": 23,
        "blockNumber": 13470123,
        "transactionHash": "0x1bddb2fb23ab06b8659822b66ba4272adb23bc4b667ae016f0b4dc6806bc6eaa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000072603a004deaa71aa0a4cdeaeaad33137e71a7a0",
          "0x0000000000000000000000004ad84f7014b7b44f723f284a85b1662337971439"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000dc11713f7620f70000000000000000000000000000000000000000000000000b8b2b0ab9ec7986000000000000000000000000000000000000000000000371b25bbb3e1f3868390000000000000000000000000000000000000000000000000aaf19997a76588f000000000000000000000000000000000000000000000371b337ccaf5eae8930",
        "logIndex": 48,
        "blockHash": "0x98d172ddb80314289f21aa731b0bf9da5de6b572ce58a906a276405c844afa07"
      }
    ],
    "blockNumber": 13470123,
    "cumulativeGasUsed": "3687915",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e4e1cb2278b15b973bf89151ad17c0de",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAdminChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPendingAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyVRFWrapperCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addRandomRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLinkToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfV2PlusWrapper\",\"outputs\":[{\"internalType\":\"contract IVRFV2PlusWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"role\",\"type\":\"address\"}],\"name\":\"removeRandomRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enableNativePayment\",\"type\":\"bool\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"params\":{\"account\":\"address\",\"role\":\"bytes32\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"owner()\":{\"details\":\"See {IERC5313-owner}.\"},\"renounceRole(bytes32,address)\":{\"params\":{\"account\":\"address\",\"role\":\"bytes32\"}},\"revokeRole(bytes32,address)\":{\"params\":{\"account\":\"address\",\"role\":\"bytes32\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferAdmin(address)\":{\"params\":{\"newAdmin\":\"address\"}},\"withdrawNative(uint256)\":{\"params\":{\"amount\":\"the amount to withdraw, in wei\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBalance()\":{\"notice\":\"getBalance returns the native balance of the consumer contract\"},\"getLinkToken()\":{\"notice\":\"getLinkToken returns the link token contract\"},\"grantRole(bytes32,address)\":{\"notice\":\"grant a rolecan only be executed by the current single adminadmin role cannot be granted externally\"},\"renounceRole(bytes32,address)\":{\"notice\":\"renounce the role of msg.senderadmin role cannot be renounced\"},\"revokeRole(bytes32,address)\":{\"notice\":\"revoke a rolecan only be executed by the current adminadmin role cannot be revoked\"},\"transferAdmin(address)\":{\"notice\":\"Transfer the admin role to a new addressThis can ONLY be executed by the current admin\"},\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"},\"withdrawNative(uint256)\":{\"notice\":\"withdrawNative withdraws the amount specified in amount to the owner\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DirectFundingConsumer.sol\":\"DirectFundingConsumer\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFV2PlusWrapperConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LinkTokenInterface} from \\\"../../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {IVRFV2PlusWrapper} from \\\"./interfaces/IVRFV2PlusWrapper.sol\\\";\\n\\n/**\\n *\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2+ requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2+ subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2PlusWrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK or ether to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomWords' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2PlusWrapperConsumerBase {\\n  error OnlyVRFWrapperCanFulfill(address have, address want);\\n\\n  LinkTokenInterface internal immutable i_linkToken;\\n  IVRFV2PlusWrapper public immutable i_vrfV2PlusWrapper;\\n\\n  /**\\n   * @param _vrfV2PlusWrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _vrfV2PlusWrapper) {\\n    IVRFV2PlusWrapper vrfV2PlusWrapper = IVRFV2PlusWrapper(_vrfV2PlusWrapper);\\n\\n    i_linkToken = LinkTokenInterface(vrfV2PlusWrapper.link());\\n    i_vrfV2PlusWrapper = vrfV2PlusWrapper;\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2+ wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2+ request ID of the newly created randomness request.\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords,\\n    bytes memory extraArgs\\n  ) internal returns (uint256 requestId, uint256 reqPrice) {\\n    reqPrice = i_vrfV2PlusWrapper.calculateRequestPrice(_callbackGasLimit, _numWords);\\n    i_linkToken.transferAndCall(\\n      address(i_vrfV2PlusWrapper),\\n      reqPrice,\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords, extraArgs)\\n    );\\n    return (i_vrfV2PlusWrapper.lastRequestId(), reqPrice);\\n  }\\n\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function requestRandomnessPayInNative(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords,\\n    bytes memory extraArgs\\n  ) internal returns (uint256 requestId, uint256 requestPrice) {\\n    requestPrice = i_vrfV2PlusWrapper.calculateRequestPriceNative(_callbackGasLimit, _numWords);\\n    return (\\n      i_vrfV2PlusWrapper.requestRandomWordsInNative{value: requestPrice}(\\n        _callbackGasLimit,\\n        _requestConfirmations,\\n        _numWords,\\n        extraArgs\\n      ),\\n      requestPrice\\n    );\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    address vrfWrapperAddr = address(i_vrfV2PlusWrapper);\\n    if (msg.sender != vrfWrapperAddr) {\\n      revert OnlyVRFWrapperCanFulfill(msg.sender, vrfWrapperAddr);\\n    }\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n\\n  /// @notice getBalance returns the native balance of the consumer contract\\n  function getBalance() public view returns (uint256) {\\n    return address(this).balance;\\n  }\\n\\n  /// @notice getLinkToken returns the link token contract\\n  function getLinkToken() public view returns (LinkTokenInterface) {\\n    return i_linkToken;\\n  }\\n}\\n\",\"keccak256\":\"0x94aec923d28f4b16648e277717644251d47e6c90af1797d2be727619521a5b92\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFV2PlusWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVRFV2PlusWrapper {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _numWords is the number of words to request.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit, uint32 _numWords) external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request in native with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _numWords is the number of words to request.\\n   */\\n  function calculateRequestPriceNative(uint32 _callbackGasLimit, uint32 _numWords) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _numWords is the number of words to request.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(\\n    uint32 _callbackGasLimit,\\n    uint32 _numWords,\\n    uint256 _requestGasPriceWei\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request in native with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _numWords is the number of words to request.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPriceNative(\\n    uint32 _callbackGasLimit,\\n    uint32 _numWords,\\n    uint256 _requestGasPriceWei\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Requests randomness from the VRF V2 wrapper, paying in native token.\\n   *\\n   * @param _callbackGasLimit is the gas limit for the request.\\n   * @param _requestConfirmations number of request confirmations to wait before serving a request.\\n   * @param _numWords is the number of words to request.\\n   */\\n  function requestRandomWordsInNative(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords,\\n    bytes calldata extraArgs\\n  ) external payable returns (uint256 requestId);\\n\\n  function link() external view returns (address);\\n  function linkNativeFeed() external view returns (address);\\n}\\n\",\"keccak256\":\"0x23a19b6fa394e21359d39d78a081ddaa68160cca4b8850afbec5843bd16a844f\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5313.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5313.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the Light Contract Ownership Standard.\\n *\\n * A standardized minimal interface required to identify an account that controls a contract\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC5313 {\\n    /**\\n     * @dev Gets the address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xeaadc351ada39f013498fad8b9d6162206cede3331dc89525686cfadb6ee9b35\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DirectFundingConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.27;\\n\\nimport \\\"./SingleAdminAccessControl.sol\\\";\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {VRFV2PlusWrapperConsumerBase} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFV2PlusWrapperConsumerBase.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\n/**\\n * Request testnet LINK and ETH here: https://faucets.chain.link/\\n * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/docs/link-token-contracts/\\n */\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\n\\ncontract DirectFundingConsumer is VRFV2PlusWrapperConsumerBase, SingleAdminAccessControl {\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n    event RequestFulfilled(\\n        uint256 requestId,\\n        uint256[] randomWords,\\n        uint256 payment\\n    );\\n\\n    struct RequestStatus {\\n        uint256 paid; // amount paid in link\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        uint256[] randomWords;\\n    }\\n\\n    mapping(uint256 => RequestStatus)\\n    public s_requests; /* requestId --> requestStatus */\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 public callbackGasLimit = 100000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 public requestConfirmations = 3;\\n\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFV2Wrapper.getConfig().maxNumWords.\\n    uint32 public numWords = 1;\\n\\n    // Address LINK - hardcoded for Sepolia\\n    address public linkAddress = 0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904;\\n\\n    // address WRAPPER - hardcoded for Sepolia\\n    address public wrapperAddress = 0x6e6c366a1cd1F92ba87Fd6f96F743B0e6c967Bf0;\\n\\n    bytes32 private constant RANDOM_ROLE = keccak256(\\\"RANDOM_ROLE\\\");\\n\\n\\n    constructor() VRFV2PlusWrapperConsumerBase(wrapperAddress){\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function requestRandomWords(bool enableNativePayment) external onlyRole(RANDOM_ROLE) returns (uint256) {\\n        bytes memory extraArgs = VRFV2PlusClient._argsToBytes(\\n            VRFV2PlusClient.ExtraArgsV1({nativePayment: enableNativePayment})\\n        );\\n        uint256 requestId;\\n        uint256 reqPrice;\\n        if (enableNativePayment) {\\n            (requestId, reqPrice) = requestRandomnessPayInNative(\\n                callbackGasLimit,\\n                requestConfirmations,\\n                numWords,\\n                extraArgs\\n            );\\n        } else {\\n            (requestId, reqPrice) = requestRandomness(\\n                callbackGasLimit,\\n                requestConfirmations,\\n                numWords,\\n                extraArgs\\n            );\\n        }\\n        s_requests[requestId] = RequestStatus({\\n            paid: reqPrice,\\n            randomWords: new uint256[](0),\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(\\n            _requestId,\\n            _randomWords,\\n            s_requests[_requestId].paid\\n        );\\n    }\\n\\n    function getRequestStatus(uint256 _requestId) external view returns (uint256 paid, bool fulfilled, uint256[] memory randomWords){\\n        require(s_requests[_requestId].paid > 0, \\\"request not found\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        return (request.paid, request.fulfilled, request.randomWords);\\n    }\\n\\n    /**\\n     * Allow withdraw of Link tokens from the contract\\n     */\\n    function withdrawLink() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        LinkTokenInterface link = LinkTokenInterface(linkAddress);\\n        require(link.transfer(msg.sender, link.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n    }\\n\\n    /// @notice withdrawNative withdraws the amount specified in amount to the owner\\n    /// @param amount the amount to withdraw, in wei\\n    function withdrawNative(uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        (bool success,) = payable(owner()).call{value: amount}(\\\"\\\");\\n        require(success, \\\"withdrawNative failed\\\");\\n    }\\n\\n    function addRandomRole(address _user) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _grantRole(RANDOM_ROLE, _user);\\n    }\\n\\n    function removeRandomRole(address role) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeRole(RANDOM_ROLE, role);\\n    }\\n\\n\\n    event Received(address, uint256);\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n}\\n\",\"keccak256\":\"0x3a59ef523c162a8c547727d5efeeeb5b323383210942a9e40a9934203de057c2\",\"license\":\"GPL-3.0\"},\"contracts/SingleAdminAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.27;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC5313.sol\\\";\\nimport \\\"./interfaces/ISingleAdminAccessControl.sol\\\";\\n\\n/**\\n * @title SingleAdminAccessControl\\n * @notice SingleAdminAccessControl is a contract that provides a single admin role\\n * @notice This contract is a simplified alternative to OpenZeppelin's AccessControlDefaultAdminRules\\n */\\nabstract contract SingleAdminAccessControl is IERC5313, ISingleAdminAccessControl, AccessControl {\\n    address private _currentDefaultAdmin;\\n    address private _pendingDefaultAdmin;\\n\\n    modifier notAdmin(bytes32 role) {\\n        if (role == DEFAULT_ADMIN_ROLE) revert InvalidAdminChange();\\n        _;\\n    }\\n\\n    /// @notice Transfer the admin role to a new address\\n    /// @notice This can ONLY be executed by the current admin\\n    /// @param newAdmin address\\n    function transferAdmin(address newAdmin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newAdmin == msg.sender) revert InvalidAdminChange();\\n        _pendingDefaultAdmin = newAdmin;\\n        emit AdminTransferRequested(_currentDefaultAdmin, newAdmin);\\n    }\\n\\n    function acceptAdmin() external {\\n        if (msg.sender != _pendingDefaultAdmin) revert NotPendingAdmin();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @notice grant a role\\n    /// @notice can only be executed by the current single admin\\n    /// @notice admin role cannot be granted externally\\n    /// @param role bytes32\\n    /// @param account address\\n    function grantRole(bytes32 role, address account) public override onlyRole(DEFAULT_ADMIN_ROLE) notAdmin(role) {\\n        _grantRole(role, account);\\n    }\\n\\n    /// @notice revoke a role\\n    /// @notice can only be executed by the current admin\\n    /// @notice admin role cannot be revoked\\n    /// @param role bytes32\\n    /// @param account address\\n    function revokeRole(bytes32 role, address account) public override onlyRole(DEFAULT_ADMIN_ROLE) notAdmin(role) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @notice renounce the role of msg.sender\\n    /// @notice admin role cannot be renounced\\n    /// @param role bytes32\\n    /// @param account address\\n    function renounceRole(bytes32 role, address account) public virtual override notAdmin(role) {\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {IERC5313-owner}.\\n   */\\n    function owner() public view virtual returns (address) {\\n        return _currentDefaultAdmin;\\n    }\\n\\n    /**\\n     * @notice no way to change admin without removing old admin first\\n   */\\n    function _grantRole(bytes32 role, address account) internal override {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            emit AdminTransferred(_currentDefaultAdmin, account);\\n            _revokeRole(DEFAULT_ADMIN_ROLE, _currentDefaultAdmin);\\n            _currentDefaultAdmin = account;\\n            delete _pendingDefaultAdmin;\\n        }\\n        super._grantRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x0ad4917f0068487062d11a4a2203afed74b88e63197c5d080d4ac618d0a77237\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleAdminAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.27;\\n\\ninterface ISingleAdminAccessControl {\\n    error InvalidAdminChange();\\n    error NotPendingAdmin();\\n\\n    event AdminTransferred(address indexed oldAdmin, address indexed newAdmin);\\n    event AdminTransferRequested(address indexed oldAdmin, address indexed newAdmin);\\n}\\n\",\"keccak256\":\"0xaab6d32c628562fb001978fec4278590502777837429d488a5151433ce03c8de\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052600680547d0fd9e8d3af1aaee056eb9e802c3a762a667b1904000000010003000186a06001600160f01b0319909116179055600780546001600160a01b031916736e6c366a1cd1f92ba87fd6f96f743b0e6c967bf017905534801561006857600080fd5b5060075460408051630711a57d60e21b815290516001600160a01b039092169182918291631c4695f4916004808201926020929091908290030181865afa1580156100b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100db91906102a8565b6001600160a01b039081166080521660a052506100f96000336100fe565b6102d8565b8161017d576001546040516001600160a01b038084169216907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a3600154610155906000906001600160a01b031661018b565b600180546001600160a01b0383166001600160a01b0319918216179091556002805490911690555b610187828261020a565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610187576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610187576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556102643390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000602082840312156102ba57600080fd5b81516001600160a01b03811681146102d157600080fd5b9392505050565b60805160a05161216561032e600039600081816105210152818161078b01528181611457015281816114c6015281816115c801528181611673015261171d015260008181610658015261163701526121656000f3fe6080604052600436106101bb5760003560e01c806384276d81116100ec578063a217fddf1161008a578063d547741f11610064578063d547741f146105fa578063d8a4676f1461061a578063e76d516814610649578063fc2a88c31461067c57600080fd5b8063a217fddf1461058f578063b0fb162f146105a4578063bc301574146105da57600080fd5b80638dc654a2116100c65780638dc654a2146104a957806391d14854146104be5780639ed0868d1461050f578063a168fa891461054357600080fd5b806384276d811461043e5780638796ba8c1461045e5780638da5cb5b1461047e57600080fd5b80632f2ff15d116101595780637392a771116101335780637392a771146103aa57806375829def146103ca5780637ccfd7fc146103ea5780637df8b8021461041157600080fd5b80632f2ff15d1461034a57806336568abe1461036a5780635d16908e1461038a57600080fd5b80631fe543e3116101955780631fe543e314610268578063235cea9814610288578063248a9ca3146102e857806324f746971461031857600080fd5b806301ffc9a7146101ff5780630e18b6811461023457806312065fe01461024b57600080fd5b366101fa57604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561020b57600080fd5b5061021f61021a366004611c1b565b610692565b60405190151581526020015b60405180910390f35b34801561024057600080fd5b5061024961072b565b005b34801561025757600080fd5b50475b60405190815260200161022b565b34801561027457600080fd5b50610249610283366004611c8c565b610789565b34801561029457600080fd5b506006546102c3906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022b565b3480156102f457600080fd5b5061025a610303366004611d83565b60009081526020819052604090206001015490565b34801561032457600080fd5b506006546103359063ffffffff1681565b60405163ffffffff909116815260200161022b565b34801561035657600080fd5b50610249610365366004611dc5565b61082b565b34801561037657600080fd5b50610249610385366004611dc5565b61087e565b34801561039657600080fd5b506102496103a5366004611df1565b6108c0565b3480156103b657600080fd5b5061025a6103c5366004611e1a565b6108f9565b3480156103d657600080fd5b506102496103e5366004611df1565b610acb565b3480156103f657600080fd5b50600654610335906601000000000000900463ffffffff1681565b34801561041d57600080fd5b506007546102c39073ffffffffffffffffffffffffffffffffffffffff1681565b34801561044a57600080fd5b50610249610459366004611d83565b610b9d565b34801561046a57600080fd5b5061025a610479366004611d83565b610c90565b34801561048a57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166102c3565b3480156104b557600080fd5b50610249610cb1565b3480156104ca57600080fd5b5061021f6104d9366004611dc5565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561051b57600080fd5b506102c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561054f57600080fd5b5061057a61055e366004611d83565b6003602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161022b565b34801561059b57600080fd5b5061025a600081565b3480156105b057600080fd5b506006546105c790640100000000900461ffff1681565b60405161ffff909116815260200161022b565b3480156105e657600080fd5b506102496105f5366004611df1565b610e61565b34801561060657600080fd5b50610249610615366004611dc5565b610e96565b34801561062657600080fd5b5061063a610635366004611d83565b610ee3565b60405161022b93929190611e73565b34801561065557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c3565b34801561068857600080fd5b5061025a60055481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061072557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461077c576040517f058d9a1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610787600033610ff7565b565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff82161461081c576040517f8ba9316e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821660248201526044015b60405180910390fd5b61082683836110bf565b505050565b6000610836816111d6565b828061086e576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108788484610ff7565b50505050565b81806108b6576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082683836111e3565b60006108cb816111d6565b6108f57f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f38361128e565b5050565b60007f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f3610925816111d6565b60006109406040518060200160405280861515815250611345565b905060008085156109845760065461097a9063ffffffff8082169161ffff6401000000008204169166010000000000009091041686611401565b90925090506109b9565b6006546109b39063ffffffff8082169161ffff6401000000008204169166010000000000009091041686611572565b90925090505b60408051606081018252828152600060208083018281528451838152808301865284860190815287845260038352949092208351815591516001830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559251805192939192610a3a9260028501920190611bbb565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550600582905560065460408051848152660100000000000090920463ffffffff1660208301527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a150949350505050565b6000610ad6816111d6565b3373ffffffffffffffffffffffffffffffffffffffff831603610b25576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff848116918217909255600154604051919216907fefdcbba819467e00b0262c12892dda980bac68580b72178e57a162368b80876690600090a35050565b6000610ba8816111d6565b6000610bc960015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610c20576040519150601f19603f3d011682016040523d82523d6000602084013e610c25565b606091505b5050905080610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77697468647261774e6174697665206661696c656400000000000000000000006044820152606401610813565b60048181548110610ca057600080fd5b600091825260209091200154905081565b6000610cbc816111d6565b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690819063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190611e9d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190611eb6565b6108f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e61626c6520746f207472616e7366657200000000000000000000000000006044820152606401610813565b6000610e6c816111d6565b6108f57f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f383610ff7565b6000610ea1816111d6565b8280610ed9576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610878848461128e565b6000818152600360205260408120548190606090610f5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e640000000000000000000000000000006044820152606401610813565b6000848152600360209081526040808320815160608101835281548152600182015460ff16151581850152600282018054845181870281018701865281815292959394860193830182828015610fd257602002820191906000526020600020905b815481526020019060010190808311610fbe575b5050509190925250508151602083015160409093015190989297509550909350505050565b816110b55760015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a36001546110689060009073ffffffffffffffffffffffffffffffffffffffff1661128e565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556002805490911690555b6108f582826117aa565b600082815260036020526040902054611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e640000000000000000000000000000006044820152606401610813565b6000828152600360209081526040909120600181810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055825161118792600290920191840190611bbb565b50600082815260036020526040908190205490517f147eb1ff0c82f87f2b03e2c43f5a36488ff63ec6b730195fde4605f612f8db51916111ca9185918591611ed3565b60405180910390a15050565b6111e0813361189a565b50565b73ffffffffffffffffffffffffffffffffffffffff81163314611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610813565b6108f582825b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156108f55760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa8260405160240161137e91511515815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915292915050565b6040517f13c34b7f00000000000000000000000000000000000000000000000000000000815263ffffffff808616600483015283166024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906313c34b7f90604401602060405180830381865afa15801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190611e9d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639cfc058e82888888886040518663ffffffff1660e01b81526004016115249493929190611f6a565b60206040518083038185885af1158015611542573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115679190611e9d565b915094509492505050565b6040517f27e5c50a00000000000000000000000000000000000000000000000000000000815263ffffffff808616600483015283166024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906327e5c50a90604401602060405180830381865afa15801561160f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116339190611e9d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000083898989896040516020016116aa9493929190611f6a565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016116d793929190611fa9565b6020604051808303816000875af11580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611eb6565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190611e9d565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f55760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561183c3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f5576118d881611952565b6118e3836020611971565b6040516020016118f4929190611fde565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526108139160040161205f565b606061072573ffffffffffffffffffffffffffffffffffffffff831660145b606060006119808360026120a1565b61198b9060026120b8565b67ffffffffffffffff8111156119a3576119a3611c5d565b6040519080825280601f01601f1916602001820160405280156119cd576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611a0457611a046120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a6757611a676120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611aa38460026120a1565b611aae9060016120b8565b90505b6001811115611b4b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611aef57611aef6120cb565b1a60f81b828281518110611b0557611b056120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611b44816120fa565b9050611ab1565b508315611bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610813565b9392505050565b828054828255906000526020600020908101928215611bf6579160200282015b82811115611bf6578251825591602001919060010190611bdb565b50611c02929150611c06565b5090565b5b80821115611c025760008155600101611c07565b600060208284031215611c2d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611bb457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215611c9f57600080fd5b82359150602083013567ffffffffffffffff811115611cbd57600080fd5b8301601f81018513611cce57600080fd5b803567ffffffffffffffff811115611ce857611ce8611c5d565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff82111715611d3357611d33611c5d565b604052918252602081840181019290810188841115611d5157600080fd5b6020850194505b83851015611d7457843580825260209586019590935001611d58565b50809450505050509250929050565b600060208284031215611d9557600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611dc057600080fd5b919050565b60008060408385031215611dd857600080fd5b82359150611de860208401611d9c565b90509250929050565b600060208284031215611e0357600080fd5b611bb482611d9c565b80151581146111e057600080fd5b600060208284031215611e2c57600080fd5b8135611bb481611e0c565b600081518084526020840193506020830160005b82811015611e69578151865260209586019590910190600101611e4b565b5093949350505050565b8381528215156020820152606060408201526000611e946060830184611e37565b95945050505050565b600060208284031215611eaf57600080fd5b5051919050565b600060208284031215611ec857600080fd5b8151611bb481611e0c565b838152606060208201526000611eec6060830185611e37565b9050826040830152949350505050565b60005b83811015611f17578181015183820152602001611eff565b50506000910152565b60008151808452611f38816020860160208601611efc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b63ffffffff8516815261ffff8416602082015263ffffffff83166040820152608060608201526000611f9f6080830184611f20565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611e946060830184611f20565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612016816017850160208801611efc565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612053816028840160208801611efc565b01602801949350505050565b602081526000611bb46020830184611f20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761072557610725612072565b8082018082111561072557610725612072565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008161210957612109612072565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206bf69d75ad2d2d75d1102e252447332d56b22b73df7576525f657f25fb71d51664736f6c634300081b0033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c806384276d81116100ec578063a217fddf1161008a578063d547741f11610064578063d547741f146105fa578063d8a4676f1461061a578063e76d516814610649578063fc2a88c31461067c57600080fd5b8063a217fddf1461058f578063b0fb162f146105a4578063bc301574146105da57600080fd5b80638dc654a2116100c65780638dc654a2146104a957806391d14854146104be5780639ed0868d1461050f578063a168fa891461054357600080fd5b806384276d811461043e5780638796ba8c1461045e5780638da5cb5b1461047e57600080fd5b80632f2ff15d116101595780637392a771116101335780637392a771146103aa57806375829def146103ca5780637ccfd7fc146103ea5780637df8b8021461041157600080fd5b80632f2ff15d1461034a57806336568abe1461036a5780635d16908e1461038a57600080fd5b80631fe543e3116101955780631fe543e314610268578063235cea9814610288578063248a9ca3146102e857806324f746971461031857600080fd5b806301ffc9a7146101ff5780630e18b6811461023457806312065fe01461024b57600080fd5b366101fa57604080513381523460208201527f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874910160405180910390a1005b600080fd5b34801561020b57600080fd5b5061021f61021a366004611c1b565b610692565b60405190151581526020015b60405180910390f35b34801561024057600080fd5b5061024961072b565b005b34801561025757600080fd5b50475b60405190815260200161022b565b34801561027457600080fd5b50610249610283366004611c8c565b610789565b34801561029457600080fd5b506006546102c3906a0100000000000000000000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022b565b3480156102f457600080fd5b5061025a610303366004611d83565b60009081526020819052604090206001015490565b34801561032457600080fd5b506006546103359063ffffffff1681565b60405163ffffffff909116815260200161022b565b34801561035657600080fd5b50610249610365366004611dc5565b61082b565b34801561037657600080fd5b50610249610385366004611dc5565b61087e565b34801561039657600080fd5b506102496103a5366004611df1565b6108c0565b3480156103b657600080fd5b5061025a6103c5366004611e1a565b6108f9565b3480156103d657600080fd5b506102496103e5366004611df1565b610acb565b3480156103f657600080fd5b50600654610335906601000000000000900463ffffffff1681565b34801561041d57600080fd5b506007546102c39073ffffffffffffffffffffffffffffffffffffffff1681565b34801561044a57600080fd5b50610249610459366004611d83565b610b9d565b34801561046a57600080fd5b5061025a610479366004611d83565b610c90565b34801561048a57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166102c3565b3480156104b557600080fd5b50610249610cb1565b3480156104ca57600080fd5b5061021f6104d9366004611dc5565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b34801561051b57600080fd5b506102c37f000000000000000000000000000000000000000000000000000000000000000081565b34801561054f57600080fd5b5061057a61055e366004611d83565b6003602052600090815260409020805460019091015460ff1682565b6040805192835290151560208301520161022b565b34801561059b57600080fd5b5061025a600081565b3480156105b057600080fd5b506006546105c790640100000000900461ffff1681565b60405161ffff909116815260200161022b565b3480156105e657600080fd5b506102496105f5366004611df1565b610e61565b34801561060657600080fd5b50610249610615366004611dc5565b610e96565b34801561062657600080fd5b5061063a610635366004611d83565b610ee3565b60405161022b93929190611e73565b34801561065557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102c3565b34801561068857600080fd5b5061025a60055481565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061072557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b60025473ffffffffffffffffffffffffffffffffffffffff16331461077c576040517f058d9a1b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610787600033610ff7565b565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff82161461081c576040517f8ba9316e00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff821660248201526044015b60405180910390fd5b61082683836110bf565b505050565b6000610836816111d6565b828061086e576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108788484610ff7565b50505050565b81806108b6576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082683836111e3565b60006108cb816111d6565b6108f57f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f38361128e565b5050565b60007f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f3610925816111d6565b60006109406040518060200160405280861515815250611345565b905060008085156109845760065461097a9063ffffffff8082169161ffff6401000000008204169166010000000000009091041686611401565b90925090506109b9565b6006546109b39063ffffffff8082169161ffff6401000000008204169166010000000000009091041686611572565b90925090505b60408051606081018252828152600060208083018281528451838152808301865284860190815287845260038352949092208351815591516001830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790559251805192939192610a3a9260028501920190611bbb565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550600582905560065460408051848152660100000000000090920463ffffffff1660208301527fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a150949350505050565b6000610ad6816111d6565b3373ffffffffffffffffffffffffffffffffffffffff831603610b25576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff848116918217909255600154604051919216907fefdcbba819467e00b0262c12892dda980bac68580b72178e57a162368b80876690600090a35050565b6000610ba8816111d6565b6000610bc960015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610c20576040519150601f19603f3d011682016040523d82523d6000602084013e610c25565b606091505b5050905080610826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f77697468647261774e6174697665206661696c656400000000000000000000006044820152606401610813565b60048181548110610ca057600080fd5b600091825260209091200154905081565b6000610cbc816111d6565b6006546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526a010000000000000000000090910473ffffffffffffffffffffffffffffffffffffffff1690819063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610d43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d679190611e9d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff909216600483015260248201526044016020604051808303816000875af1158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb9190611eb6565b6108f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f556e61626c6520746f207472616e7366657200000000000000000000000000006044820152606401610813565b6000610e6c816111d6565b6108f57f1aca1516ed0211ebda8cb0db4547d2dab09c1b3a281dd40978bb2cf3801171f383610ff7565b6000610ea1816111d6565b8280610ed9576040517f6317a0fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610878848461128e565b6000818152600360205260408120548190606090610f5d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e640000000000000000000000000000006044820152606401610813565b6000848152600360209081526040808320815160608101835281548152600182015460ff16151581850152600282018054845181870281018701865281815292959394860193830182828015610fd257602002820191906000526020600020905b815481526020019060010190808311610fbe575b5050509190925250508151602083015160409093015190989297509550909350505050565b816110b55760015460405173ffffffffffffffffffffffffffffffffffffffff8084169216907ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec690600090a36001546110689060009073ffffffffffffffffffffffffffffffffffffffff1661128e565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556002805490911690555b6108f582826117aa565b600082815260036020526040902054611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e640000000000000000000000000000006044820152606401610813565b6000828152600360209081526040909120600181810180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055825161118792600290920191840190611bbb565b50600082815260036020526040908190205490517f147eb1ff0c82f87f2b03e2c43f5a36488ff63ec6b730195fde4605f612f8db51916111ca9185918591611ed3565b60405180910390a15050565b6111e0813361189a565b50565b73ffffffffffffffffffffffffffffffffffffffff81163314611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610813565b6108f582825b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16156108f55760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa8260405160240161137e91511515815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915292915050565b6040517f13c34b7f00000000000000000000000000000000000000000000000000000000815263ffffffff808616600483015283166024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906313c34b7f90604401602060405180830381865afa15801561149e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c29190611e9d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639cfc058e82888888886040518663ffffffff1660e01b81526004016115249493929190611f6a565b60206040518083038185885af1158015611542573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115679190611e9d565b915094509492505050565b6040517f27e5c50a00000000000000000000000000000000000000000000000000000000815263ffffffff808616600483015283166024820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906327e5c50a90604401602060405180830381865afa15801561160f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116339190611e9d565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000083898989896040516020016116aa9493929190611f6a565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016116d793929190611fa9565b6020604051808303816000875af11580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611eb6565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015611786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115679190611e9d565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f55760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561183c3390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108f5576118d881611952565b6118e3836020611971565b6040516020016118f4929190611fde565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a00000000000000000000000000000000000000000000000000000000082526108139160040161205f565b606061072573ffffffffffffffffffffffffffffffffffffffff831660145b606060006119808360026120a1565b61198b9060026120b8565b67ffffffffffffffff8111156119a3576119a3611c5d565b6040519080825280601f01601f1916602001820160405280156119cd576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611a0457611a046120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611a6757611a676120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611aa38460026120a1565b611aae9060016120b8565b90505b6001811115611b4b577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611aef57611aef6120cb565b1a60f81b828281518110611b0557611b056120cb565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611b44816120fa565b9050611ab1565b508315611bb4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610813565b9392505050565b828054828255906000526020600020908101928215611bf6579160200282015b82811115611bf6578251825591602001919060010190611bdb565b50611c02929150611c06565b5090565b5b80821115611c025760008155600101611c07565b600060208284031215611c2d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611bb457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215611c9f57600080fd5b82359150602083013567ffffffffffffffff811115611cbd57600080fd5b8301601f81018513611cce57600080fd5b803567ffffffffffffffff811115611ce857611ce8611c5d565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811067ffffffffffffffff82111715611d3357611d33611c5d565b604052918252602081840181019290810188841115611d5157600080fd5b6020850194505b83851015611d7457843580825260209586019590935001611d58565b50809450505050509250929050565b600060208284031215611d9557600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611dc057600080fd5b919050565b60008060408385031215611dd857600080fd5b82359150611de860208401611d9c565b90509250929050565b600060208284031215611e0357600080fd5b611bb482611d9c565b80151581146111e057600080fd5b600060208284031215611e2c57600080fd5b8135611bb481611e0c565b600081518084526020840193506020830160005b82811015611e69578151865260209586019590910190600101611e4b565b5093949350505050565b8381528215156020820152606060408201526000611e946060830184611e37565b95945050505050565b600060208284031215611eaf57600080fd5b5051919050565b600060208284031215611ec857600080fd5b8151611bb481611e0c565b838152606060208201526000611eec6060830185611e37565b9050826040830152949350505050565b60005b83811015611f17578181015183820152602001611eff565b50506000910152565b60008151808452611f38816020860160208601611efc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b63ffffffff8516815261ffff8416602082015263ffffffff83166040820152608060608201526000611f9f6080830184611f20565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000611e946060830184611f20565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612016816017850160208801611efc565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612053816028840160208801611efc565b01602801949350505050565b602081526000611bb46020830184611f20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761072557610725612072565b8082018082111561072557610725612072565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008161210957612109612072565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212206bf69d75ad2d2d75d1102e252447332d56b22b73df7576525f657f25fb71d51664736f6c634300081b0033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "params": {
          "account": "address",
          "role": "bytes32"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "owner()": {
        "details": "See {IERC5313-owner}."
      },
      "renounceRole(bytes32,address)": {
        "params": {
          "account": "address",
          "role": "bytes32"
        }
      },
      "revokeRole(bytes32,address)": {
        "params": {
          "account": "address",
          "role": "bytes32"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferAdmin(address)": {
        "params": {
          "newAdmin": "address"
        }
      },
      "withdrawNative(uint256)": {
        "params": {
          "amount": "the amount to withdraw, in wei"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getBalance()": {
        "notice": "getBalance returns the native balance of the consumer contract"
      },
      "getLinkToken()": {
        "notice": "getLinkToken returns the link token contract"
      },
      "grantRole(bytes32,address)": {
        "notice": "grant a rolecan only be executed by the current single adminadmin role cannot be granted externally"
      },
      "renounceRole(bytes32,address)": {
        "notice": "renounce the role of msg.senderadmin role cannot be renounced"
      },
      "revokeRole(bytes32,address)": {
        "notice": "revoke a rolecan only be executed by the current adminadmin role cannot be revoked"
      },
      "transferAdmin(address)": {
        "notice": "Transfer the admin role to a new addressThis can ONLY be executed by the current admin"
      },
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      },
      "withdrawNative(uint256)": {
        "notice": "withdrawNative withdraws the amount specified in amount to the owner"
      }
    },
    "notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 433,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)428_storage)"
      },
      {
        "astId": 2437,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "_currentDefaultAdmin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2439,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "_pendingDefaultAdmin",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2115,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "s_requests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)2110_storage)"
      },
      {
        "astId": 2118,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "requestIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2120,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2123,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 2126,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 2129,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "numWords",
        "offset": 6,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 2132,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "linkAddress",
        "offset": 10,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2135,
        "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)428_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)428_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)2110_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DirectFundingConsumer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)2110_storage"
      },
      "t_struct(RequestStatus)2110_storage": {
        "encoding": "inplace",
        "label": "struct DirectFundingConsumer.RequestStatus",
        "members": [
          {
            "astId": 2104,
            "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
            "label": "paid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2106,
            "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
            "label": "fulfilled",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 2109,
            "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
            "label": "randomWords",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)428_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 425,
            "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 427,
            "contract": "contracts/DirectFundingConsumer.sol:DirectFundingConsumer",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}